{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","_ref","totalCounters","react_default","a","createElement","className","href","Counter","styles","fontSize","fontWeight","fontFamily","this","state","tags","length","style","map","tag","key","_this2","props","id","getBadgeClasses","formatvalue","onClick","onIncrement","counter","onDelete","classes","value","Component","Counters","_this","onReset","counters","components_counter","App","handleDelete","counterId","filter","c","setState","handleIncrement","Object","toConsumableArray","index","indexOf","objectSpread","handleReset","Fragment","navbar","components_counters","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.24abe1f6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\n\n// Stateless Navbar component. \nconst NavBar = ({totalCounters}) => {\n  return (\n    <nav className=\"navbar navbar-light bg-light\">\n      <a className=\"navbar-brand\" href=\"#\">\n        Simple React Counter App\n        <span className=\"badge badge-pill badge-secondary m-3\">\n          {totalCounters}\n        </span>\n      </a>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { brotliDecompress } from \"zlib\";\n\nclass Counter extends Component {\n\n  // Styles for the html elements\n  styles = {\n    fontSize: 20,\n    fontWeight: \"bold\",\n    fontFamily: \"fira sans\"\n  };\n\n  // Function that checks if we have tags and returns a result based on that.\n  renderTags() {\n    // Check if we have some tags, if not we tell the user\n    if (this.state.tags.length === 0) return <p>There are no tags!</p>;\n\n    return (\n      <ul style={this.styles}>\n        {this.state.tags.map(tag => (\n          <li key={tag}>{tag}</li>\n        ))}\n      </ul>\n    );\n  }\n\n  render() {\n   \n    return (\n      <div>\n        <h4>Counter #{this.props.id}</h4>\n        <span className={this.getBadgeClasses()}>{this.formatvalue()}</span>\n        <button\n          onClick={() => this.props.onIncrement(this.props.counter)}\n          className=\"btn btn-primary btn-sm\"\n        >\n          Increment\n        </button>\n        <button\n          onClick={() => this.props.onDelete(this.props.id)}\n          className=\"button btn btn-danger btn-sm m-3\"\n        >\n          Delete\n        </button>\n      </div>\n    );\n  }\n\n  // Function to show a different badge icon when the counter is zero\n  getBadgeClasses() {\n    let classes = \"badge m-2 badge-\";\n    classes += this.props.value === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  // If the counter is 0, we use the words Zero\n  formatvalue() {\n    const { value } = this.props.counter;\n    return value === 0 ? \"zero\" : value;\n  }\n}\n\nexport default Counter;\n","import React, { Component } from \"react\";\nimport Counter from \"./counter\";\n\nclass Counters extends Component {\n  render() {\n    return (\n      <div>\n        <button\n          onClick={this.props.onReset}\n          className=\"btn btn-primary btn-small m-2\"\n        >\n          reset\n        </button>\n        {this.props.counters.map(counter => {\n          return (\n            <Counter\n              counter={counter}\n              key={counter.id}\n              onIncrement={this.props.onIncrement}\n              onDelete={this.props.onDelete}\n              value={counter.value}\n              id={counter.id}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default Counters;\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/navbar\";\nimport \"./App.css\";\nimport Counters from \"./components/counters\";\n\nclass App extends Component {\n\n  // Our state. Lifted into the main App class so states are managed by the main parent. \n  state = {\n    counters: [\n      { id: 1, value: 0 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 }\n    ]\n  };\n\n  // Handler for deleting a counter\n  handleDelete = counterId => {\n    const counters = this.state.counters.filter(c => c.id !== counterId);\n    this.setState({ counters });\n  };\n\n  // Handler for incrementing the counter\n  handleIncrement = counter => {\n    // using spread operator to clone the counters from the state in an array\n    const counters = [...this.state.counters];\n    // grabbing the index of the counter we were passed using our array above.\n    const index = counters.indexOf(counter);\n    // setting the index counter to the clone object we were passed\n    counters[index] = { ...counter };\n    // we incrememt the new counter we copied\n    counters[index].value++;\n    this.setState({ counters });\n  };\n\n  handleReset = () => {\n    this.setState({\n      counters: [\n        { id: 1, value: 0 },\n        { id: 2, value: 0 },\n        { id: 3, value: 0 },\n        { id: 4, value: 0 }\n      ]});\n\n    //this.setState({ counters });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar totalCounters={this.state.counters.filter(c => c.value > 0).length}/>\n        <main className=\"container\">\n          <Counters\n            counters={this.state.counters}\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n            onDelete={this.handleDelete}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Counters from \"./components/counters\";\n\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}